Theory Explanation:
Counting Parentheses:

The problem asks for the maximum depth of nested parentheses. This can be viewed as a counting problem where we need to track how deeply we are nested within parentheses as we iterate through the string.
Opening Parentheses (():

Each time an opening parenthesis is encountered, we increment the opening counter. This increases the depth.
Closing Parentheses ()):

When a closing parenthesis is encountered, the opening counter is decremented. This decreases the depth as we exit a nested level.
Tracking Maximum Depth:

During the iteration, we keep track of the highest value of the opening counter. This value represents the maximum depth at any point in the string.
Edge Cases:

If the string contains no parentheses, the depth is 0.
If the string contains balanced parentheses, the maximum depth is the deepest level of nested parentheses.
Space Complexity:
Auxiliary Space:
The algorithm uses only a few integer variables (opening and ans), which take constant space.
Final Space Complexity: O(1), as the space used does not depend on the size of the input string.
Time Complexity:
Single Loop Over String:
We iterate through the string exactly once, performing constant-time operations (incrementing and decrementing integers, updating the maximum) for each character. This step takes O(n) time, where n is the length of the string.
Final Time Complexity: O(n), where n is the length of the string.
Overall Complexity:
Time Complexity: O(n), where n is the length of the string.
Space Complexity: O(1), as we use a constant amount of space.
This solution efficiently calculates the maximum depth of nested parentheses by keeping track of the depth as we iterate through the string, with a time complexity of O(n) and space complexity of O(1).
